import{_ as l,c as a,o as i,a4 as t,ac as r,ad as e,ae as s,af as o}from"./chunks/framework.A-dsNYHP.js";const P=JSON.parse('{"title":"从输入URL到页面加载出来发生了什么","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/Browser/URL.md","filePath":"blog/study/Browser/URL.md"}'),n={name:"blog/study/Browser/URL.md"},p=t(`<h1 id="从输入url到页面加载出来发生了什么" tabindex="-1">从输入URL到页面加载出来发生了什么 <a class="header-anchor" href="#从输入url到页面加载出来发生了什么" aria-label="Permalink to &quot;从输入URL到页面加载出来发生了什么&quot;">​</a></h1><hr><h3 id="一、dns解析域名得到ip地址" tabindex="-1">一、DNS解析域名得到IP地址 <a class="header-anchor" href="#一、dns解析域名得到ip地址" aria-label="Permalink to &quot;一、DNS解析域名得到IP地址&quot;">​</a></h3><h3 id="_1、url的组成" tabindex="-1">1、URL的组成 <a class="header-anchor" href="#_1、url的组成" aria-label="Permalink to &quot;1、URL的组成&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>https://baidu.com:80/xxxx/page/index.html?id=xxx#title</span></span>
<span class="line"><span>协议     主机     端口  路径      资源名     参数    锚点</span></span></code></pre></div><h3 id="_2、dns解析分为递归查询和迭代查询两种-一般是迭代查询" tabindex="-1">2、DNS解析分为递归查询和迭代查询两种，一般是迭代查询 <a class="header-anchor" href="#_2、dns解析分为递归查询和迭代查询两种-一般是迭代查询" aria-label="Permalink to &quot;2、DNS解析分为递归查询和迭代查询两种，一般是迭代查询&quot;">​</a></h3><h3 id="二、tcp连接-三次握手" tabindex="-1">二、TCP连接（三次握手） <a class="header-anchor" href="#二、tcp连接-三次握手" aria-label="Permalink to &quot;二、TCP连接（三次握手）&quot;">​</a></h3><ul><li>第一次：客户端发送请求到服务器，服务器知道客户端发送，自己接收正常。</li><li>第二次：服务器发给客户端，客户端知道自己发送、接收正常，服务器接收、发送正常。</li><li>第三次：客户端发给服务器：服务器知道客户端发送，接收正常，自己接收，发送也正常</li></ul><h3 id="三、发送http请求" tabindex="-1">三、发送HTTP请求 <a class="header-anchor" href="#三、发送http请求" aria-label="Permalink to &quot;三、发送HTTP请求&quot;">​</a></h3><ul><li>请求报文 <ul><li>请求行 === 路径 方法 协议</li><li>请求头 === 自定义信 和 content-type , userAgent 等</li><li>请求体 === 用来传输数据</li><li>状态码 HTTP缓存（强缓存、协商缓存）</li></ul></li></ul><h3 id="四、服务处理请求并返回http报文" tabindex="-1">四、服务处理请求并返回HTTP报文 <a class="header-anchor" href="#四、服务处理请求并返回http报文" aria-label="Permalink to &quot;四、服务处理请求并返回HTTP报文&quot;">​</a></h3><ul><li>响应报头与响应报文</li><li>状态码 <ul><li>1xx : 指示信息====表示请求已接收 ,继续处理</li><li>2xx : 成功====表示请求已被成功接收</li><li>3xx : 重定向====要完成请求必须进行更进一步操作 <ul><li>301 永久重定向</li><li>302 临时重定向</li><li>304 客户端有缓存 服务端的一种响应</li></ul></li><li>4xx : 客户端错误====请求语法错误或者 请求无法实现 <ul><li>400 错误请求</li><li>401 未授权</li><li>403 禁止访问</li><li>404 未找到</li></ul></li><li>5xx : 服务端错误====服务器未能实现合法请求 <ul><li>500 服务器内部错误</li><li>503 服务器不可用</li></ul></li></ul></li></ul><h3 id="五、浏览器渲染页面" tabindex="-1">五、浏览器渲染页面 <a class="header-anchor" href="#五、浏览器渲染页面" aria-label="Permalink to &quot;五、浏览器渲染页面&quot;">​</a></h3><p><img src="`+r+'" alt="图片"></p><ul><li><strong>DOM</strong>：将HTML解析成DOM树</li><li><strong>Style</strong>：解析CSS</li><li><strong>Layout</strong>：构建布局树，布局树会移出DOM树中不可见的部分，并计算可见部分的几何位置</li><li><strong>Layer</strong>：将页面划分多个图层，一些层叠上下文CSS属性（z-index、opacity、position）等会使DOM元素形成独立的图层</li><li><strong>Paint</strong>：为每个图层生成包含“绘制信息”的绘制图表，将绘制图表提交给渲染进程的合成线程用于绘制</li></ul><p><strong>每次执行流水线时，上述任务并不一定全部执行 例如：</strong></p><ul><li><strong>重排（回流）</strong>：当通过JS或者CSS修改DOM元素的几何属性（比如长度、宽度）时，会触发整条流水线</li><li><strong>重绘</strong>：当修改的属性不涉及几何属性（比如文字颜色、样式等）时，会省略流水线中的Layout、Layer过程</li><li><strong>合成</strong>：当修改“不涉及重绘、重排的属性”（比如transform属性）时，会省略流水线的Layout、Layer、Paint过程，仅执行合成线程的绘制工作。</li></ul><p>如果遇到外联的样式声明和脚本声明 则暂停文档解析</p><p><img src="'+e+'" alt="图片"></p><p>script标签的 defer 与 async 属性 <strong>只适用于外联脚本</strong> 带有src属性</p><p><strong>async</strong> 异步下载脚本文件，<strong>下载完毕立即解释</strong> 执行代码（如果有多个 因为是异步 没有办法判断顺序）</p><p><img src="'+s+'" alt="图片"></p><p><strong>defer</strong>开启新的线程下载脚本文件，并使脚本在 <strong>文档解析完成</strong> 后执行 （如果有多个 按顺序执行）</p><p><img src="'+o+'" alt="图片"></p><h3 id="六、tcp断开连接-四次挥手" tabindex="-1">六、TCP断开连接（四次挥手） <a class="header-anchor" href="#六、tcp断开连接-四次挥手" aria-label="Permalink to &quot;六、TCP断开连接（四次挥手）&quot;">​</a></h3><ul><li>第一次：客户端请求断开</li><li>第二次：服务器确认客户端的断开请求</li><li>第三次：服务器请求断开</li><li>第四次：客户端确认服务器的断开</li></ul>',26),h=[p];function c(d,u,g,_,m,x){return i(),a("div",null,h)}const f=l(n,[["render",c]]);export{P as __pageData,f as default};
