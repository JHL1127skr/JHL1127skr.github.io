import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BX6OBtZC.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/algorithm/Array/PrefixSum.md","filePath":"blog/algorithm/Array/PrefixSum.md"}'),p={name:"blog/algorithm/Array/PrefixSum.md"},e=n(`<h3 id="_1、「区域和检索-数组不可变」🟢" tabindex="-1">1、<a href="https://leetcode.cn/problems/range-sum-query-immutable/" target="_blank" rel="noreferrer">「区域和检索 - 数组不可变」</a>🟢 <a class="header-anchor" href="#_1、「区域和检索-数组不可变」🟢" aria-label="Permalink to &quot;1、[「区域和检索 - 数组不可变」](https://leetcode.cn/problems/range-sum-query-immutable/)🟢&quot;">​</a></h3><p>题目：给定一个整数数组 <code>nums</code>，实现<code>sumRange</code>方法，快速查询指定区间之内的元素合，会多次调用。</p><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>输入： nums = [-2, 0, 3, -5, 2, -1] 。updates = [0, 2], [2, 5], [0, 5]</span></span>
<span class="line"><span>输出：[ 1, -1, -3]</span></span></code></pre></div><p>思路：在定义该数组的时候，将新数组的第<code>index</code>项的值写作该数组<code>0～index-1</code>的之和。这样如果我要计算<code>第x项</code>和<code>第y项</code>之间的值，只需要用新数组的<code>第y+1项 - 第x项</code>就可得到结果。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nums = [-2, 0, 3, -5, 2] | [0,2] =&gt; -2 + 0 + 3 = 1</span></span>
<span class="line"><span>prefixSum = [0, -2, -2, 1, -4, -2] | [0,2]=&gt; [2+1] - [0] =&gt; 1-0 =1</span></span></code></pre></div><p>代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> prefixSum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  初始化前缀和数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        prefixSum[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixSum[key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefixSum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NumArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.nums[right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.nums[left];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="_2、「二维区域和检索-矩阵不可变」🟠-未搞懂" tabindex="-1">2、<a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/" target="_blank" rel="noreferrer">「二维区域和检索 - 矩阵不可变」</a>🟠 未搞懂 <a class="header-anchor" href="#_2、「二维区域和检索-矩阵不可变」🟠-未搞懂" aria-label="Permalink to &quot;2、[「二维区域和检索 - 矩阵不可变」](https://leetcode.cn/problems/range-sum-query-2d-immutable/)🟠 未搞懂&quot;">​</a></h3><p>题目：给定一个二维矩阵 <code>matrix</code>，实现<code>sumRegion</code>方法，计算其子矩形范围内元素的总和。该子矩阵的 <strong>左上角</strong> 为 <code>(row1, col1)</code> ，<strong>右下角</strong> 为 <code>(row2, col2)</code></p><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>输入：matrix = [</span></span>
<span class="line"><span>	[3,0,1,4,2],</span></span>
<span class="line"><span>	[5,6,3,2,1],</span></span>
<span class="line"><span>	[1,2,0,1,5],</span></span>
<span class="line"><span>	[4,1,0,1,7],</span></span>
<span class="line"><span>	[1,0,3,0,5]</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>updates = [2,1,4,3],[1,1,2,2],[1,2,2,4]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输出：[ 8, 11, 12]</span></span></code></pre></div><p>思路：</p><p>代码：</p>`,14),t=[e];function l(h,k,r,d,o,E){return a(),i("div",null,t)}const y=s(p,[["render",l]]);export{c as __pageData,y as default};
