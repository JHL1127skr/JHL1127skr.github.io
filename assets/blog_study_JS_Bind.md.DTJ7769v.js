import{_ as s,c as i,o as a,a4 as n,aw as t}from"./chunks/framework.DwS4PCXf.js";const y=JSON.parse('{"title":"bind 的使用","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/JS/Bind.md","filePath":"blog/study/JS/Bind.md"}'),e={name:"blog/study/JS/Bind.md"},h=n(`<h1 id="bind-的使用" tabindex="-1">bind 的使用 <a class="header-anchor" href="#bind-的使用" aria-label="Permalink to &quot;bind 的使用&quot;">​</a></h1><hr><div class="tip custom-block"><p class="custom-block-title">问：bind 之后能改变 this 指向吗?</p><p>答：不行</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newFn);</span></span></code></pre></div><p>改变<code>this</code>指向后，返回一个绑定函数 <code>bound function</code>。如下图： <img src="`+t+'" alt=""></p><p><code>TargetFunction</code>：指向原函数、 <code>BoundThis</code>：绑定的 this 指向、 <code>BoundArgs</code>：传入的参数</p><p>所以 当绑定函数执行的时候 相当于 <code>TargetFunction.apply(BoundThis,BoundArgs)</code></p>',7),l=[h];function p(k,d,o,r,c,E){return a(),i("div",null,l)}const u=s(e,[["render",p]]);export{y as __pageData,u as default};
