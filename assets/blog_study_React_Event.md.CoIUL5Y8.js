import{_ as s,c as a,o as i,a4 as t,aE as e}from"./chunks/framework.DwS4PCXf.js";const u=JSON.parse('{"title":"React 事件机制","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/React/Event.md","filePath":"blog/study/React/Event.md"}'),n={name:"blog/study/React/Event.md"},h=t(`<h1 id="react-事件机制" tabindex="-1">React 事件机制 <a class="header-anchor" href="#react-事件机制" aria-label="Permalink to &quot;React 事件机制&quot;">​</a></h1><hr><h3 id="react-事件机制-v16-旧" tabindex="-1">React 事件机制（v16 旧） <a class="header-anchor" href="#react-事件机制-v16-旧" aria-label="Permalink to &quot;React 事件机制（v16 旧）&quot;">​</a></h3><blockquote><p>事件委托：利用事件冒泡的特性，把多个子元素的同一类型的监听逻辑合并到父元素上通过一个监听函数来管理的行为</p></blockquote><h5 id="一、react-事件系统是如何工作的" tabindex="-1">一、React 事件系统是如何工作的 <a class="header-anchor" href="#一、react-事件系统是如何工作的" aria-label="Permalink to &quot;一、React 事件系统是如何工作的&quot;">​</a></h5><p>React 事件系统沿袭了事件委托的思想，在 React 中，除了少数特殊的不可冒泡的事件无法被事件系统处理外，绝大部分的事件都不会被绑定在具体的元素上，而是统一被绑定在页面的 document 上。</p><p><strong>当事件在具体的 DOM 节点上被触发后，最终都会冒泡到 document 上，document 上所绑定的统一的事件处理程序会将事件分发到具体的实例。</strong></p><p>在分发事件之前，React 首先会对事件进行包装，把原生 DOM 事件包装成<strong>合成事件</strong></p><h4 id="二、合成事件" tabindex="-1">二、合成事件 <a class="header-anchor" href="#二、合成事件" aria-label="Permalink to &quot;二、合成事件&quot;">​</a></h4><p>合成事件是 React 自定义的事件对象，符合 W3C 规范。<strong>在底层磨平不同浏览器的差异，在上层向开发者暴露统一的、稳定的、与 DOM 原声事件相同的事件接口</strong></p><p>虽然合成事件并不是原生 DOM 事件，但它保存了原生 DOM 事件的引用，可通过合成事件的<code>e.nativeEvent</code> 属性访问到</p><h4 id="三、合成事件池" tabindex="-1">三、合成事件池 <a class="header-anchor" href="#三、合成事件池" aria-label="Permalink to &quot;三、合成事件池&quot;">​</a></h4><p>当一个事件被触发时，React 会创建一个<strong>合成事件对象</strong>，并传递给事件处理函数。当函数执行完之后，合成时间对象上的所有属性都将被废弃并丢回合成事件池。当下一个事件触发时会尝试在事件池中获取一个时间对象，而不是重新创建。</p><p>通过合成事件池，React 可以大大节省内存，不会频繁的创建和销毁事件对象，减轻了垃圾回收的压力。</p><h4 id="四、缺点与隐患" tabindex="-1">四、缺点与隐患 <a class="header-anchor" href="#四、缺点与隐患" aria-label="Permalink to &quot;四、缺点与隐患&quot;">​</a></h4><h5 id="_1、异步访问事件对象" tabindex="-1">1、异步访问事件对象 <a class="header-anchor" href="#_1、异步访问事件对象" aria-label="Permalink to &quot;1、异步访问事件对象&quot;">​</a></h5><p>由于事件对象会被事件池回收，所以不能以异步的方式访问</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>当然 React 提供持久化合成事件的方法</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">persist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h5 id="_2、多个-react-应用" tabindex="-1">2、多个 React 应用 <a class="header-anchor" href="#_2、多个-react-应用" aria-label="Permalink to &quot;2、多个 React 应用&quot;">​</a></h5><p>如果一个页面上存在多个 React 应用，由于他们都会在顶层的 document 注册事件，那么就会导致如果其中一个应用调用了 <code>e.stopPropagetion()</code>也无法阻止事件冒泡，因为真实事件早已经传播到了 document</p><h5 id="_3、无法阻止原生的事件的捕获冒泡阶段" tabindex="-1">3、无法阻止原生的事件的捕获冒泡阶段 <a class="header-anchor" href="#_3、无法阻止原生的事件的捕获冒泡阶段" aria-label="Permalink to &quot;3、无法阻止原生的事件的捕获冒泡阶段&quot;">​</a></h5><p>React 是统一冒泡到 document 之后触发绑定的回调函数中模拟 <strong>捕获-冒泡</strong> 的行为，如果在 React 事件中调用 <code>e.sttopPropagetion()</code>是没有办法阻止原生事件的冒泡的，因为原生的捕获和冒泡已经执行完了</p><h3 id="react-事件机制-v17-新" tabindex="-1">React 事件机制（v17 新） <a class="header-anchor" href="#react-事件机制-v17-新" aria-label="Permalink to &quot;React 事件机制（v17 新）&quot;">​</a></h3><h3 id="一、跟旧版相比" tabindex="-1">一、跟旧版相比 <a class="header-anchor" href="#一、跟旧版相比" aria-label="Permalink to &quot;一、跟旧版相比&quot;">​</a></h3><p>1、v16 React 将事件委托在 document 上 v17 则委托在<strong>根节点</strong>上 -- 对应问题 2</p><p>2、去除了事件池 -- 对应问题 1</p><p>3、对标原生事件的执行顺序 -- 对应问题 3</p><p>4、scroll 事件不再冒泡</p><p><img src="`+e+'" alt="图片"></p>',31),l=[h];function p(k,r,o,c,d,E){return i(),a("div",null,l)}const y=s(n,[["render",p]]);export{u as __pageData,y as default};
