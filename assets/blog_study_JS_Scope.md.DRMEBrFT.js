import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.sZGJh8CM.js";const E=JSON.parse('{"title":"作用域和作用域链","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/JS/Scope.md","filePath":"blog/study/JS/Scope.md"}'),t={name:"blog/study/JS/Scope.md"},e=n(`<h1 id="作用域和作用域链" tabindex="-1">作用域和作用域链 <a class="header-anchor" href="#作用域和作用域链" aria-label="Permalink to &quot;作用域和作用域链&quot;">​</a></h1><hr><h3 id="什么是作用域-scope" tabindex="-1">什么是作用域（scope） <a class="header-anchor" href="#什么是作用域-scope" aria-label="Permalink to &quot;什么是作用域（scope）&quot;">​</a></h3><p>作用域是在运行时代码中某些特定部分中的变量、函数和对象的可访问性。换句话说，作用域决定了代码区块中变量和其他资源的可见性。</p><p>ES6之前 JavaScript 只有<strong>全局作用域</strong>和<strong>函数作用域</strong>,ES6提供了<strong>块级作用域</strong>,可通过新增命令let和const来体现</p><h3 id="全局作用域和函数作用域" tabindex="-1">全局作用域和函数作用域 <a class="header-anchor" href="#全局作用域和函数作用域" aria-label="Permalink to &quot;全局作用域和函数作用域&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Tony&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //等同于 window.age = 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught ReferenceError: test is not defined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 18</span></span></code></pre></div><h3 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在 {} 内使用 let / const 定义的变量便形成块级作用域</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tony&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uncaught ReferenceError: test is not defined</span></span></code></pre></div><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行</p>`,11),h=[e];function l(p,k,r,o,d,c){return a(),i("div",null,h)}const y=s(t,[["render",l]]);export{E as __pageData,y as default};
