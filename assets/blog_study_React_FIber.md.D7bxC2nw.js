import{_ as e,c as a,o as r,a4 as t,aF as i}from"./chunks/framework.DwS4PCXf.js";const u=JSON.parse('{"title":"Fiber架构：未完成","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/React/FIber.md","filePath":"blog/study/React/FIber.md"}'),o={name:"blog/study/React/FIber.md"},c=t('<h1 id="fiber架构-未完成" tabindex="-1">Fiber架构：未完成 <a class="header-anchor" href="#fiber架构-未完成" aria-label="Permalink to &quot;Fiber架构：未完成&quot;">​</a></h1><hr><h3 id="fiiber的出现" tabindex="-1">FIiber的出现 <a class="header-anchor" href="#fiiber的出现" aria-label="Permalink to &quot;FIiber的出现&quot;">​</a></h3><p>随着业务复杂繁重，React 15中的栈调和（Stack Reconciler ）是一个同步递归的过程，漫长不可打断的同步渲染进程会带来一定风险。</p><h3 id="什么是fiber" tabindex="-1">什么是Fiber <a class="header-anchor" href="#什么是fiber" aria-label="Permalink to &quot;什么是Fiber&quot;">​</a></h3><blockquote><p>Fiber就是比线程还要纤细的一个过程，也就是所谓的“纤程”，纤程的出现意在渲染过程实现更加精细的控制</p></blockquote><h4 id="一、从架构角度来看-fiber是对react核心算法的重写" tabindex="-1">一、从架构角度来看：Fiber是对React核心算法的重写 <a class="header-anchor" href="#一、从架构角度来看-fiber是对react核心算法的重写" aria-label="Permalink to &quot;一、从架构角度来看：Fiber是对React核心算法的重写&quot;">​</a></h4><h4 id="二、从编码角度来看-fiber是react内部定义的一种数据结构" tabindex="-1">二、从编码角度来看：Fiber是React内部定义的一种数据结构 <a class="header-anchor" href="#二、从编码角度来看-fiber是react内部定义的一种数据结构" aria-label="Permalink to &quot;二、从编码角度来看：Fiber是React内部定义的一种数据结构&quot;">​</a></h4><h4 id="三、从工作流的角度来看-fiber节点保存了组件需要更新的状态和副作用" tabindex="-1">三、从工作流的角度来看：Fiber节点保存了组件需要更新的状态和副作用 <a class="header-anchor" href="#三、从工作流的角度来看-fiber节点保存了组件需要更新的状态和副作用" aria-label="Permalink to &quot;三、从工作流的角度来看：Fiber节点保存了组件需要更新的状态和副作用&quot;">​</a></h4><blockquote><p>Fiber架构的应用目的是实现 “增量渲染”</p></blockquote><p>所谓“增量渲染”就是把一个渲染任务分解成多个渲染任务，将其分散到多个帧里面， “增量渲染” 目的是实现任务的<em>可中断</em>、<em>可恢复</em>、不同的任务不同的<em>优先级</em>，达成更加顺滑的用户体验</p><p><img src="'+i+'" alt="图片"></p><p>对比React15 Fiber架构增加了调度器 <strong>Scheduler</strong></p><h3 id="fiber架构核心-可中断-、-可恢复-、-优先级" tabindex="-1">Fiber架构核心：“可中断”、“可恢复”、“优先级” <a class="header-anchor" href="#fiber架构核心-可中断-、-可恢复-、-优先级" aria-label="Permalink to &quot;Fiber架构核心：“可中断”、“可恢复”、“优先级”&quot;">​</a></h3><p>优先级：每个更新任务都会被赋予一个优先级</p><p>可中断：若发现B的优先级高于当前任务A，那么当前处于Reconciler层的A任务就会被中断</p><p>可恢复：A任务将会被重新推入Reconciler层，继续他的渲染之旅，这便是所谓的“可恢复”</p>',17),b=[c];function l(n,h,s,d,p,f){return r(),a("div",null,b)}const m=e(o,[["render",l]]);export{u as __pageData,m as default};
