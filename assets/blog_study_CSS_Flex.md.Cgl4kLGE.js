import{_ as e,c as a,o as i,a4 as l}from"./chunks/framework.A-dsNYHP.js";const f=JSON.parse('{"title":"Flex","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/CSS/Flex.md","filePath":"blog/study/CSS/Flex.md"}'),s={name:"blog/study/CSS/Flex.md"},o=l('<h1 id="flex" tabindex="-1">Flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;Flex&quot;">​</a></h1><hr><div class="tip custom-block" style="padding-top:8px;"> 容器内有默认水平方向的 <b>主轴</b>，垂直方向的 <b>交叉轴</b>。 </div><h3 id="作用于容器的属性" tabindex="-1">作用于容器的属性： <a class="header-anchor" href="#作用于容器的属性" aria-label="Permalink to &quot;作用于容器的属性：&quot;">​</a></h3><br><h3 id="_1、flex-direction-用于切换主轴的方向" tabindex="-1">1、<code>flex-direction</code> - 用于切换主轴的方向 <a class="header-anchor" href="#_1、flex-direction-用于切换主轴的方向" aria-label="Permalink to &quot;1、`flex-direction` - 用于切换主轴的方向&quot;">​</a></h3><ul><li><code>row（默认值）</code>： 主轴为水平方向，起点在左端</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端</li><li><code>column</code>：主轴为垂直方向，起点在上端</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下端</li></ul><h3 id="_2、flex-wrap-换行-增加轴线" tabindex="-1">2、<code>flex-wrap</code> - 换行（增加轴线） <a class="header-anchor" href="#_2、flex-wrap-换行-增加轴线" aria-label="Permalink to &quot;2、`flex-wrap` - 换行（增加轴线）&quot;">​</a></h3><ul><li><code>nowrap（默认值）</code>：不换行</li><li><code>wrap</code>：换行，第一行在上方</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul><h3 id="_3、flex-flow-以上两种缩写-默认-row-nowrap" tabindex="-1">3、<code>flex-flow</code>- 以上两种缩写 （默认 row nowrap） <a class="header-anchor" href="#_3、flex-flow-以上两种缩写-默认-row-nowrap" aria-label="Permalink to &quot;3、`flex-flow`- 以上两种缩写 （默认 row nowrap）&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4、justify-content-主轴的对齐方式" tabindex="-1">4、<code>justify-content</code> - 主轴的对齐方式 <a class="header-anchor" href="#_4、justify-content-主轴的对齐方式" aria-label="Permalink to &quot;4、`justify-content` - 主轴的对齐方式&quot;">​</a></h3><ul><li><code>flex-start（默认值）</code>：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>：居中</li><li><code>space-between</code>：两端对齐，间隔相等</li><li><code>space-around</code>：子元素的两侧间隔相等，</li><li><code>space-evenly</code>：子元素之间的间隔相等</li></ul><h3 id="_5、align-item-交叉轴对齐方式" tabindex="-1">5、<code>align-item</code> - 交叉轴对齐方式 <a class="header-anchor" href="#_5、align-item-交叉轴对齐方式" aria-label="Permalink to &quot;5、`align-item` - 交叉轴对齐方式&quot;">​</a></h3><ul><li><code>stretch（默认值）</code>：如果子元素未设置高度或为auto，将占满整个容器的高度</li><li><code>baseline</code>：文字基线对齐</li><li><code>flex-start</code>：交叉轴顶端对齐</li><li><code>flex-end</code>：交叉轴末端对齐</li><li><code>center</code>：交叉轴中点对齐</li></ul><h3 id="_6、align-content-轴线对齐方式" tabindex="-1">6、<code>align-content</code> - 轴线对齐方式 <a class="header-anchor" href="#_6、align-content-轴线对齐方式" aria-label="Permalink to &quot;6、`align-content` - 轴线对齐方式&quot;">​</a></h3><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。</li><li><code>stretch（默认值）</code>：轴线占满整个交叉轴。</li></ul><h3 id="作用于子元素" tabindex="-1">作用于子元素 <a class="header-anchor" href="#作用于子元素" aria-label="Permalink to &quot;作用于子元素&quot;">​</a></h3><ol><li><p><code>order</code> - 定义元素排列顺序（默认 0）</p></li><li><p><code>flex-grow</code> - 元素的放大比例 （默认 0）</p></li><li><p><code>flex-shrink</code> - 元素缩小比例 （默认 1）</p></li><li><p><code>flex-basis</code> - 分配多余空间之前，元素占据容器的空间 （默认 auto）</p></li><li><p><code>algin-self</code> - 元素的对齐方式（默认 auto，之外属性与<code>algin-item</code>属性相同）</p></li><li><p><code>flex</code> - 前三者缩写</p></li></ol><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | &lt;flex-grow&gt; || &lt;flex-shrink&gt; || &lt;flex-basis&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    1 -&gt; 1 1 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    auto -&gt; 1 1 auto</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    none -&gt; 0 0 auto</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    default -&gt; 0 1 auto</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>',20),t=[o];function n(c,d,r,h,p,k){return i(),a("div",null,t)}const g=e(s,[["render",n]]);export{f as __pageData,g as default};
