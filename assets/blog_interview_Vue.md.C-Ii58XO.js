import{_ as e,c as a,o as s,a4 as i}from"./chunks/framework.A-dsNYHP.js";const g=JSON.parse('{"title":"Vue","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/interview/Vue.md","filePath":"blog/interview/Vue.md"}'),t={name:"blog/interview/Vue.md"},n=i(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h3 id="vue3-与-vue2-生命周期对比" tabindex="-1">vue3 与 vue2 生命周期对比 <a class="header-anchor" href="#vue3-与-vue2-生命周期对比" aria-label="Permalink to &quot;vue3 与 vue2 生命周期对比&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// setup() -&gt; beforeCreate （初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// setup() -&gt; create</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onBeforeMount -&gt; beforeMount （组件挂载之前调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onMount -&gt; mount （组件挂载之后调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onBeforeUpdate -&gt; beforeUpdate （组件更新之前调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onUpdate -&gt; update （组件更新之后调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onBeforeUnmount -&gt; beforeDestroyed （组件卸载之前调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onUnmount -&gt; destroyed （组件卸载之后调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onActivaed -&gt; activaed （当组件是&lt;keepAlive&gt;缓存的一部分时，组件插入DOM时</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onDeactivaed -&gt; deactivaed （当组件是&lt;keepAlive&gt;缓存的一部分时，组件从DOM移除时</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// onErrorCaptured -&gt; errorCaptured （错误边界，在捕获了后代组件传递的错误时调用</span></span></code></pre></div><h3 id="vue3新增了什么" tabindex="-1">vue3新增了什么 <a class="header-anchor" href="#vue3新增了什么" aria-label="Permalink to &quot;vue3新增了什么&quot;">​</a></h3><ol><li>虚拟DOM</li><li>更换了双向绑定原理 Proxy</li><li>组合式API</li><li>单节点变成多节点</li></ol><h3 id="vue-的响应式原理中-object-defineproperty-有什么缺陷" tabindex="-1">Vue 的响应式原理中 Object.defineProperty 有什么缺陷? <a class="header-anchor" href="#vue-的响应式原理中-object-defineproperty-有什么缺陷" aria-label="Permalink to &quot;Vue 的响应式原理中 Object.defineProperty 有什么缺陷?&quot;">​</a></h3><ol><li>对数组的监听有限制</li><li>监听对象只能监听属性，且如果属性为对象，需要遍历监听</li><li>proxy可以代理动态增加的属性</li></ol>`,7),l=[n];function o(r,p,h,d,c,u){return s(),a("div",null,l)}const v=e(t,[["render",o]]);export{g as __pageData,v as default};
