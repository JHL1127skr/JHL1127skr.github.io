import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.BX6OBtZC.js";const E=JSON.parse('{"title":"for in 与 for of","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/study/JS/Forin&Forof.md","filePath":"blog/study/JS/Forin&Forof.md"}'),n={name:"blog/study/JS/Forin&Forof.md"},o=e(`<h1 id="for-in-与-for-of" tabindex="-1">for in 与 for of <a class="header-anchor" href="#for-in-与-for-of" aria-label="Permalink to &quot;for in 与 for of&quot;">​</a></h1><hr><h3 id="for-in" tabindex="-1"><code>for in</code> <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;\`for in\`&quot;">​</a></h3><ol><li>遍历对象时 <code>key = 对象的键</code> / 遍历数组时 <code>key = 数组的下标</code></li><li>遍历数组时 遍历出来的下标为<strong>字符串</strong>类型 不能直接进行运算</li><li>使用for in 会遍历数组所有<strong>可枚举属性</strong>，包括原型。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr ){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// name</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>总结 for in 特别适合遍历对象</p></div><h3 id="for-of" tabindex="-1">for of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;for of&quot;">​</a></h3><ol><li>遍历对象时 会报错 <code>obj is not iterable</code> / <code>遍历数组时 key = 数组的值</code></li><li>一个数据结构只要部署了 <code>Symbol.iterator</code> 属性, 就被视为具有 iterator接口, 就可以使用 for of循环。提供了遍历所有数据结构的统一接口</li><li>可以配合 return break continue 打断循环</li></ol><p>那些数据结构部署了<code>Symbol.iterator</code>属性了呢?</p><p><code>数组 Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、<code>arguments对象</code>、<code>Nodelist对象（就是获取的dom列表集合）</code></p>`,10),t=[o];function l(r,h,p,d,k,c){return a(),i("div",null,t)}const g=s(n,[["render",l]]);export{E as __pageData,g as default};
